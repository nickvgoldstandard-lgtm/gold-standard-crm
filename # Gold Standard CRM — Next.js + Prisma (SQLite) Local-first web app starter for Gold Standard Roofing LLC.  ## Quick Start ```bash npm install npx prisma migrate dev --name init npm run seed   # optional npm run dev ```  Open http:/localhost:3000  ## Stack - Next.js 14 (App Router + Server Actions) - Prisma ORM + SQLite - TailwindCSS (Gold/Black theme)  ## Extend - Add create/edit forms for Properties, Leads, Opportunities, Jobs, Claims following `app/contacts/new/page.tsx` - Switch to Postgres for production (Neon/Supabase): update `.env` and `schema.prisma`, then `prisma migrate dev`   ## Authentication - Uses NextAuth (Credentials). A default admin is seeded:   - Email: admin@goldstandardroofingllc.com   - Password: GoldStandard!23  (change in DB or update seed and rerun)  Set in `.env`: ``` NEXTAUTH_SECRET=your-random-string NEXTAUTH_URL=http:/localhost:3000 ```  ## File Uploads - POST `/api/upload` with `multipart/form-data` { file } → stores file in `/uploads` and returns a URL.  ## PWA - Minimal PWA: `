
# Gold Standard CRM — Next.js + Prisma (SQLite)
Local-first web app starter for Gold Standard Roofing LLC.

## Quick Start
```bash
npm install
npx prisma migrate dev --name init
npm run seed   # optional
npm run dev
```

Open http://localhost:3000

## Stack
- Next.js 14 (App Router + Server Actions)
- Prisma ORM + SQLite
- TailwindCSS (Gold/Black theme)

## Extend
- Add create/edit forms for Properties, Leads, Opportunities, Jobs, Claims following `app/contacts/new/page.tsx`
- Switch to Postgres for production (Neon/Supabase): update `.env` and `schema.prisma`, then `prisma migrate dev`


## Authentication
- Uses NextAuth (Credentials). A default admin is seeded:
  - Email: admin@goldstandardroofingllc.com
  - Password: GoldStandard!23  (change in DB or update seed and rerun)

Set in `.env`:
```
NEXTAUTH_SECRET=your-random-string
NEXTAUTH_URL=http://localhost:3000
```

## File Uploads
- POST `/api/upload` with `multipart/form-data` { file } → stores file in `/uploads` and returns a URL.

## PWA
- Minimal PWA: `public/manifest.webmanifest` and `public/service-worker.js` registered in layout.
- Replace placeholder icons in `/public/icon-192.png` and `/public/icon-512.png`.

## Protecting Routes
- `middleware.ts` protects everything except `/signin` and auth endpoints.


## Deploy (Vercel + Neon Postgres)
1. **Create a Neon Postgres** database. Copy the connection string.
2. In `prisma/schema.prisma`, change:
   ```prisma
   datasource db { provider = "postgresql"; url = env("DATABASE_URL") }
   ```
3. In `.env`, set:
   ```
   DATABASE_URL="postgresql://...your Neon URL..."
   NEXTAUTH_SECRET=your-random-string
   NEXTAUTH_URL=https://your-vercel-domain.vercel.app
   ```
4. Push the code to GitHub.
5. **Import to Vercel** → set the above env vars.
6. Run:
   ```bash
   npx prisma migrate deploy
   ```
7. (Optional) Seed admin in production:
   ```bash
   node prisma/seed.cjs
   ```

> Tip: For file uploads in production, switch from local `/uploads` to S3 and update `/api/upload` to use the S3 SDK.


## Production Uploads (S3) — Setup
1. Create an **S3 bucket** (e.g., `gold-standard-crm-uploads`) in your AWS account.
2. In **Vercel → Settings → Environment Variables**, add:
   - `USE_S3=true`
   - `AWS_REGION=us-east-1` (or your region)
   - `AWS_ACCESS_KEY_ID=...`
   - `AWS_SECRET_ACCESS_KEY=...`
   - `S3_BUCKET=gold-standard-crm-uploads`
3. (Optional) Add a simple bucket policy to allow public reads for objects if you want direct-file URLs:
   ```json
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Sid": "AllowPublicRead",
         "Effect": "Allow",
         "Principal": "*",
         "Action": "s3:GetObject",
         "Resource": "arn:aws:s3:::gold-standard-crm-uploads/*"
       }
     ]
   }
   ```
4. Re-deploy. The `/api/upload` route now stores files in S3 and returns an HTTPS URL.

## Vercel + Neon quick deploy checklist
- Switch Prisma provider to `postgresql`, set `DATABASE_URL` in Vercel env.
- Set auth/env vars:
  - `NEXTAUTH_SECRET`, `NEXTAUTH_URL`
  - S3 vars from above
- After first deploy, run migrations (via CLI or GitHub Action):
  ```bash
  npx prisma migrate deploy
  node prisma/seed.cjs
  ```


## Galleries (Jobs & Claims)
- New **Media** model stores multiple file URLs per Job/Claim.
- On Job/Claim edit pages, use the **Gallery** block to paste S3 URLs and add labels.
- Delete any tile to remove it from the record (does not delete from S3).

## Role-based Access (RBAC)
- User roles: `owner`, `admin`, `rep`, `crew` (stored on `User`).
- Seeded users:
  - Admin: `admin@goldstandardroofingllc.com` / `GoldStandard!23`
  - Rep:   `rep@goldstandardroofingllc.com` / `GoldRep!23`
  - Crew:  `crew@goldstandardroofingllc.com` / `GoldCrew!23`
- Hooks in code ready (`lib/rbac.ts`). Extend checks in server actions as you expand.

## JobNimbus Integration (scaffold)
- **Export JSON**: `/api/export/jobnimbus?jobId=...` (button on Job page).
- **Sync POST**: `/api/sync/jobnimbus` (uses `JOBNIMBUS_ENDPOINT` + `JOBNIMBUS_API_KEY` if set; otherwise returns 501).
- Replace the endpoint/key with your real JobNimbus API details and expand payload mapping as needed.


## Multi-file Uploads + Thumbnails
- `/upload` now supports **multiple files** and, if opened with `?type=job&id=<ID>` or `?type=claim&id=<ID>`, it **auto-attaches** each upload to that record's Gallery.
- Image uploads generate a **600px JPEG thumbnail** (S3 key with `_thumb.jpg`). The upload API returns `{ path, thumb }`.

## Enforced RBAC
- All create/update actions now call `requireEdit()`; gallery add/delete calls `requireUpload()`.
- Unauthorized roles will receive a `Forbidden` error even if UI is visible.

## JobNimbus Auth Scheme
- Configure either:
  - `JOBNIMBUS_AUTH_SCHEME=Bearer` (default) with `JOBNIMBUS_API_KEY`
  - or `JOBNIMBUS_AUTH_SCHEME=x-api-key` (header `x-api-key`)

## Soft Deletes + Audit Log
- Core entities now have `deletedAt` for archiving/restoring.
- `lib/softDelete.ts` exposes `softDelete(entity, id)` and `restore(entity, id)`.
- `AuditLog` stores action, who, when, and optional metadata.

## UI Gating by Role
- Server component `<Gate roles={['owner','admin']}>...</Gate>` to show/hide UI.
- Archive/Restore buttons added to each edit page, visible to owner/admin only.

## Polished Estimate/Contract PDFs
- `GET /api/estimate-pdf-advanced?opportunityId=...&mode=estimate|contract`
- Includes logo, line items, and a signature block for contract mode.


## Audit Log (Admin)
- Visit **/admin/audit** (owner/admin only).
- Filter by **user email contains**, **entity**, and **role**.
- Shows last 500 events with metadata.

## Change Orders
- Pages:
  - Index: **/change-orders**
  - New: **/change-orders/new** (accepts `?jobId=...`)
  - Detail/Edit: **/change-orders/[id]** (PDF button for signature-ready CO)
- Also visible from **Job** edit page as an inline section.
- Status flow: `proposed → approved → billed` (or `rejected`).

